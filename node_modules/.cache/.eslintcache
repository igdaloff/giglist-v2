[{"/Users/nathan/Sites/giglist-v2/src/index.js":"1","/Users/nathan/Sites/giglist-v2/src/App.js":"2","/Users/nathan/Sites/giglist-v2/src/Components/Header.js":"3","/Users/nathan/Sites/giglist-v2/src/Components/CitySelect.js":"4","/Users/nathan/Sites/giglist-v2/src/Components/SpotifyEmbed.js":"5"},{"size":219,"mtime":1647978224572,"results":"6","hashOfConfig":"7"},{"size":3004,"mtime":1649266763145,"results":"8","hashOfConfig":"7"},{"size":200,"mtime":1648164930478,"results":"9","hashOfConfig":"7"},{"size":613,"mtime":1648784550990,"results":"10","hashOfConfig":"7"},{"size":2180,"mtime":1649266643739,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1kxu57d",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"15"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"15"},"/Users/nathan/Sites/giglist-v2/src/index.js",[],[],["31","32"],"/Users/nathan/Sites/giglist-v2/src/App.js",["33","34"],[],"import React, { useState, useEffect } from 'react';\nimport { Header } from './Components/Header';\nimport { CitySelect } from './Components/CitySelect';\nimport { SpotifyEmbed } from './Components/SpotifyEmbed';\n\nconst cityOptions = {\n  \"new-york\": {\n    label: \"New York\",\n    value: \"new-york\",   \n    id: 7644\n  },\n  \"los-angeles\": {\n    label: \"Los Angeles\",\n    value: \"los-angeles\",    \n    id: 17835\n  },\n  \"columbus\": {\n    label: \"Columbus\",\n    value: \"columbus\",   \n    id: 9480\n  }\n};\n\n\n//Generate the Songkick API url (MOVE THIS INTO CUSTOM HOOK AND SEPARATE FILE EVENTUALLY)\nfunction getSongkickUrl(songkickCityId){   \n  const songkickAPIKey = process.env.REACT_APP_SONGKICK_API_KEY;\n  let songkickUrl = \"https://api.songkick.com/api/3.0/metro_areas/\" + songkickCityId + \"/calendar.json?apikey=\" + songkickAPIKey;\n  return songkickUrl;\n};\n\nfunction App() {\n\n  const [ city, setCity ] = useState('new-york');\n  let cityData = cityOptions[city];\n  const songkickId = cityData.id;\n\n  //Fetch list of gigs in selected city from Songkick API\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [artist, setArtist] = useState('');\n\n  useEffect(() => {\n    const cachedResultJson = localStorage.getItem(`cache-${songkickId}`);\n\n    // If cached Songkick data exists, retrieve from there\n    if(cachedResultJson) {\n      setIsLoaded(true);\n      const cachedResult = JSON.parse(cachedResultJson);\n      setItems(cachedResult.resultsPage.results.event);\n\n    // If no cached Songkick data, fetch from API and send to localstorage\n    } else {\n      let songkickUrl = getSongkickUrl(songkickId);\n      fetch(songkickUrl)\n        .then(res => res.json())\n        .then(\n          (response) => {\n            setIsLoaded(true);\n            setItems(response.resultsPage.results.event);\n            localStorage.setItem(`cache-${songkickId}`, JSON.stringify(response));\n          },\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n    }\n  }, [songkickId]);\n\n  if(!isLoaded || !items.length){\n    return <h1>Loading...</h1>\n  }\n\n  const randomGig = items[Math.floor(Math.random()*items.length)];\n  const randomGigVenue = randomGig.venue.displayName;\n  const randomGigUrl = randomGig.uri;\n  const randomGigArtist = randomGig.performance[0].artist.displayName;\n  const randomGigArtistId = randomGig.performance[0].artist.id;\n\n  return (\n    <div>\n      <Header />\n      <p>Random Gig in {cityData.label}</p>                      \n      <h2><a href={randomGigUrl}>Go see <strong>{randomGigArtist}</strong> at <strong>{randomGigVenue}</strong></a></h2>\n\n      <CitySelect\n        city={city}\n        setCity={setCity}\n        cityOptions={cityOptions}\n      />\n\n      <SpotifyEmbed artist={randomGigArtist} artistId={randomGigArtistId}/>      \n\n      <button onClick={() => setArtist({randomGigArtist})}>Refresh</button>\n\n    </div>\n  );\n}\n\nexport default App;","/Users/nathan/Sites/giglist-v2/src/Components/Header.js",[],[],"/Users/nathan/Sites/giglist-v2/src/Components/CitySelect.js",["35","36","37","38","39"],[],"import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nexport function CitySelect(props) { \n\tconst {\n\t\tcity,\n\t\tsetCity,\n\t\tcityOptions\n\t} = props;\n\t\n  const cityData = props.cityOptions[props.city];\n\n  //Populate the city select dropdown\n\treturn (\n\t\t<div className=\"flex justify-center content-center h-full p-0 m-0\">\n\t\t\t<select className=\"m-auto\" value={city} onChange={ (event) => props.setCity(event.target.value) }>\n\t\t\t\t{Object.values(props.cityOptions).map((option) => (\n\t\t\t\t\t<option key={option.value} value={option.value}>{option.label}</option>\n\t\t\t  ))}\n\t\t\t</select>\t\t\n\t\t</div>\t\t\t\n\t);\t\n}","/Users/nathan/Sites/giglist-v2/src/Components/SpotifyEmbed.js",["40","41","42","43","44","45","46"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport function SpotifyEmbed(props) {\n\n\tconst [token, setToken] = useState('');\n\tconst [src, setSrc] = useState('');\t\t\n\tconst [isLoaded, setIsLoaded] = useState(false);\n\tconst [items, setItems] = useState([]);\n\tconst [artistId, setArtistId] = useState('');\n\n\tuseEffect(() => {\n\n\t  // API call for retrieving Spotify token\n\t  axios('https://accounts.spotify.com/api/token', {\n\t    headers: {\n\t      'Content-Type' : 'application/x-www-form-urlencoded',\n\t      'Authorization' : 'Basic ' + btoa(process.env.REACT_APP_SPOTIFY_API_KEY)\n\t    },\n\t    data: 'grant_type=client_credentials',\n\t    method: 'POST'\n\t  })\n\t  .then(tokenResponse => {\n\t    setToken(tokenResponse.data.access_token);\n\n\t    const cachedResultJson = localStorage.getItem(`cache-${props.artistId}`);\n\n\t    // If cached Spotify data exists, retrieve from there\t    \n\t    if(cachedResultJson){\n\t    \t\n\t    \tsetIsLoaded(true);\n\t    \t\n\t    \tconst cachedResult = JSON.parse(cachedResultJson);\n\t    \t\n\t    \tsetItems(cachedResult);\n\n\t    } else {\n\n\t\t\t\t//Artist query to get artist's Spotify ID\n\t\t\t\taxios(`https://api.spotify.com/v1/search?q=${props.artist}&type=artist&limit=1`,{\n\t\t\t\t  'method': 'GET',\n\t\t\t\t  'headers': {\n\t\t\t\t    'Content-Type': 'application/json',\n\t\t\t\t    'Accept': 'application/json',\n\t\t\t\t    'Authorization': 'Bearer ' + tokenResponse.data.access_token\n\t\t\t\t  }\n\t\t\t\t})\n\n\t\t\t\t//Populate artist URL for embed using API response from above\n\t\t\t\t.then(artistresponse=> { \n\t\t\t\t\t\n\t\t\t\t\tsetIsLoaded(true);\n\n\t\t\t\t  const spotifyArtistId = artistresponse.data.artists.items[0].id;\t      \n\t\t\t\t  const src = `https://open.spotify.com/embed/artist/${spotifyArtistId}`\t      \t      \n\n\t\t\t\t  setSrc(src);\t  \n\t\t\t\t  setItems(artistresponse);\n\n\t\t\t\t  localStorage.setItem(`cache-${props.artistId}`, JSON.stringify(artistresponse));\n\n\t\t\t\t}).catch(error=> console.log(error))\n\t    }\t    \n\t  }).catch(error => console.log(error));\n\t},[props.artist]);\n\n\tif ( src ) {\t\t\n\t\treturn <iframe artist={props.artist} src={src} width=\"300\" height=\"80\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\t\t\t\n\t} else {\n\t\treturn null\n\t}\n};",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":39,"column":10,"nodeType":"53","messageId":"54","endLine":39,"endColumn":15},{"ruleId":"51","severity":1,"message":"55","line":42,"column":10,"nodeType":"53","messageId":"54","endLine":42,"endColumn":16},{"ruleId":"51","severity":1,"message":"56","line":1,"column":17,"nodeType":"53","messageId":"54","endLine":1,"endColumn":25},{"ruleId":"51","severity":1,"message":"57","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":16},{"ruleId":"51","severity":1,"message":"58","line":7,"column":3,"nodeType":"53","messageId":"54","endLine":7,"endColumn":10},{"ruleId":"51","severity":1,"message":"59","line":8,"column":3,"nodeType":"53","messageId":"54","endLine":8,"endColumn":14},{"ruleId":"51","severity":1,"message":"60","line":11,"column":9,"nodeType":"53","messageId":"54","endLine":11,"endColumn":17},{"ruleId":"51","severity":1,"message":"61","line":6,"column":9,"nodeType":"53","messageId":"54","endLine":6,"endColumn":14},{"ruleId":"51","severity":1,"message":"62","line":8,"column":9,"nodeType":"53","messageId":"54","endLine":8,"endColumn":17},{"ruleId":"51","severity":1,"message":"63","line":9,"column":9,"nodeType":"53","messageId":"54","endLine":9,"endColumn":14},{"ruleId":"51","severity":1,"message":"64","line":10,"column":9,"nodeType":"53","messageId":"54","endLine":10,"endColumn":17},{"ruleId":"51","severity":1,"message":"65","line":10,"column":19,"nodeType":"53","messageId":"54","endLine":10,"endColumn":30},{"ruleId":"66","severity":1,"message":"67","line":65,"column":4,"nodeType":"68","endLine":65,"endColumn":18,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":68,"column":10,"nodeType":"72","endLine":68,"endColumn":139},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'artist' is assigned a value but never used.","'useState' is defined but never used.","'ReactDOM' is defined but never used.","'setCity' is assigned a value but never used.","'cityOptions' is assigned a value but never used.","'cityData' is assigned a value but never used.","'token' is assigned a value but never used.","'isLoaded' is assigned a value but never used.","'items' is assigned a value but never used.","'artistId' is assigned a value but never used.","'setArtistId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.artistId'. Either include it or remove the dependency array.","ArrayExpression",["75"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [props.artist, props.artistId]",{"range":"78","text":"79"},[1966,1980],"[props.artist, props.artistId]"]