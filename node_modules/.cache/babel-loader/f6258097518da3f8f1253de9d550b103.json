{"ast":null,"code":"var _jsxFileName = \"/Users/nathan/Sites/giglist-v2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Header } from './Components/Header';\nimport { CitySelect } from './Components/CitySelect';\nimport { SpotifyEmbed } from './Components/SpotifyEmbed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cityOptions = {\n  \"new-york\": {\n    label: \"New York\",\n    value: \"new-york\",\n    id: 7644\n  },\n  \"los-angeles\": {\n    label: \"Los Angeles\",\n    value: \"los-angeles\",\n    id: 17835\n  },\n  \"columbus\": {\n    label: \"Columbus\",\n    value: \"columbus\",\n    id: 9480\n  }\n}; //Generate the Songkick API url (MOVE THIS INTO CUSTOM HOOK AND SEPARATE FILE EVENTUALLY)\n\nfunction getSongkickUrl(songkickCityId) {\n  const songkickAPIKey = 'RpuYqxFiPPsJPs5l';\n  let songkickUrl = \"https://api.songkick.com/api/3.0/metro_areas/\" + songkickCityId + \"/calendar.json?apikey=\" + songkickAPIKey;\n  return songkickUrl;\n  console.log(songkickUrl);\n}\n\n;\nconst songKickResultsCache = {};\n\nfunction App() {\n  _s();\n\n  const [city, setCity] = useState('new-york');\n  let cityData = cityOptions[city];\n  const songkickId = cityData.id; //Fetch list of gigs in selected city from Songkick API\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    const cachedResult = songKickResultsCache[songkickId];\n\n    if (cachedResult) {\n      console.log(`result for ${songkickId} was cached`);\n      setItems(cachedResult.response.resultsPage.results.event);\n    } else {\n      let songkickUrl = getSongkickUrl(songkickId);\n      console.log(`not cached - fetching from ${songkickUrl}`);\n      fetch(songkickUrl).then(res => res.json()).then(response => {\n        setIsLoaded(true);\n        setItems(response.resultsPage.results.event);\n        cachedResult[songkickId] = response;\n      }, error => {\n        setIsLoaded(true);\n        setError(error);\n      });\n    }\n  }, [songkickId]);\n\n  if (!isLoaded || !items.length) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this);\n  }\n\n  let randomGig = items[Math.floor(Math.random() * items.length)];\n  let randomGigArtist = randomGig.performance[0].artist.displayName;\n  let randomGigVenue = randomGig.venue.displayName;\n  let randomGigUrl = randomGig.uri;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Random Gig in \", cityData.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: randomGigUrl,\n        children: [\"Go see \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: randomGigArtist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 41\n        }, this), \" at \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: randomGigVenue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 79\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CitySelect, {\n      city: city,\n      setCity: setCity,\n      cityOptions: cityOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SpotifyEmbed, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SbWE6DsVB2wRaADE827olKEQevM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nathan/Sites/giglist-v2/src/App.js"],"names":["React","useState","useEffect","Header","CitySelect","SpotifyEmbed","cityOptions","label","value","id","getSongkickUrl","songkickCityId","songkickAPIKey","songkickUrl","console","log","songKickResultsCache","App","city","setCity","cityData","songkickId","error","setError","isLoaded","setIsLoaded","items","setItems","cachedResult","response","resultsPage","results","event","fetch","then","res","json","length","randomGig","Math","floor","random","randomGigArtist","performance","artist","displayName","randomGigVenue","venue","randomGigUrl","uri"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Header } from './Components/Header';\nimport { CitySelect } from './Components/CitySelect';\nimport { SpotifyEmbed } from './Components/SpotifyEmbed';\n\nconst cityOptions = {\n  \"new-york\": {\n    label: \"New York\",\n    value: \"new-york\",   \n    id: 7644\n  },\n  \"los-angeles\": {\n    label: \"Los Angeles\",\n    value: \"los-angeles\",    \n    id: 17835\n  },\n  \"columbus\": {\n    label: \"Columbus\",\n    value: \"columbus\",   \n    id: 9480\n  }\n};\n\n//Generate the Songkick API url (MOVE THIS INTO CUSTOM HOOK AND SEPARATE FILE EVENTUALLY)\nfunction getSongkickUrl(songkickCityId){   \n  const songkickAPIKey = 'RpuYqxFiPPsJPs5l';\n  let songkickUrl = \"https://api.songkick.com/api/3.0/metro_areas/\" + songkickCityId + \"/calendar.json?apikey=\" + songkickAPIKey;\n  return songkickUrl;\n  console.log(songkickUrl);\n};\n\nconst songKickResultsCache = {};\n\n\nfunction App() {\n\n  const [ city, setCity ] = useState('new-york');\n  let cityData = cityOptions[city];\n  const songkickId = cityData.id;\n\n\n  //Fetch list of gigs in selected city from Songkick API\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    const cachedResult = songKickResultsCache[songkickId];\n    if(cachedResult) {\n      console.log(`result for ${songkickId} was cached`);\n      setItems(cachedResult.response.resultsPage.results.event);\n\n    } else {\n      let songkickUrl = getSongkickUrl(songkickId);\n      console.log(`not cached - fetching from ${songkickUrl}`)\n      fetch(songkickUrl)\n        .then(res => res.json())\n        .then(\n          (response) => {\n            setIsLoaded(true);\n            setItems(response.resultsPage.results.event);\n            cachedResult[songkickId] = response;\n          },\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n      }\n    }, [songkickId])\n\n  if(!isLoaded || !items.length){\n    return <h1>Loading...</h1>\n  }\n\n  let randomGig = items[Math.floor(Math.random()*items.length)];\n  let randomGigArtist = randomGig.performance[0].artist.displayName;\n  let randomGigVenue = randomGig.venue.displayName;\n  let randomGigUrl = randomGig.uri;\n\n  return (\n    <div className=\"h-full\">\n      <Header />\n      <p>Random Gig in {cityData.label}</p>                      \n      <h2><a href={randomGigUrl}>Go see <strong>{randomGigArtist}</strong> at <strong>{randomGigVenue}</strong></a></h2>\n\n      <CitySelect\n        city={city}\n        setCity={setCity}\n        cityOptions={cityOptions}\n      />\n\n      {/*Pass spotify ID into here*/}\n      <SpotifyEmbed />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}