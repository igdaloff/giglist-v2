{"ast":null,"code":"var _jsxFileName = \"/Users/nathan/Sites/giglist-v2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Header } from './Components/Header';\nimport { CitySelect } from './Components/CitySelect';\nimport { SpotifyEmbed } from './Components/SpotifyEmbed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cityOptions = {\n  \"new-york\": {\n    label: \"New York\",\n    value: \"new-york\",\n    id: 7644\n  },\n  \"los-angeles\": {\n    label: \"Los Angeles\",\n    value: \"los-angeles\",\n    id: 17835\n  },\n  \"columbus\": {\n    label: \"Columbus\",\n    value: \"columbus\",\n    id: 9480\n  }\n};\n\nfunction App() {\n  _s();\n\n  const [city, setCity] = useState('new-york');\n  const cityData = cityOptions[city]; //Generate the Songkick API url\n\n  function getSongkickUrl(songkickCityId) {\n    const songkickAPIKey = 'RpuYqxFiPPsJPs5l';\n    let songkickUrl = \"https://api.songkick.com/api/3.0/metro_areas/\" + songkickCityId + \"/calendar.json?apikey=\" + songkickAPIKey;\n    return songkickUrl;\n  }\n\n  ;\n  const songkickUrl = getSongkickUrl(cityData.id); //Fetch list of gigs in selected city from Songkick API\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    fetch(songkickUrl).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n  const gigs = items.resultsPage.results.event;\n  {\n    console.log(gigs);\n  }\n  const listOfGigs = gigs.map(gig => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: gig\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 6\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"City: \", cityData.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"ID: \", cityData.id, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: listOfGigs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CitySelect, {\n      city: city,\n      setCity: setCity,\n      cityOptions: cityOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SpotifyEmbed, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SbWE6DsVB2wRaADE827olKEQevM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nathan/Sites/giglist-v2/src/App.js"],"names":["React","useState","useEffect","Header","CitySelect","SpotifyEmbed","cityOptions","label","value","id","App","city","setCity","cityData","getSongkickUrl","songkickCityId","songkickAPIKey","songkickUrl","error","setError","isLoaded","setIsLoaded","items","setItems","fetch","then","res","json","result","gigs","resultsPage","results","event","console","log","listOfGigs","map","gig"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Header } from './Components/Header';\nimport { CitySelect } from './Components/CitySelect';\nimport { SpotifyEmbed } from './Components/SpotifyEmbed';\n\nconst cityOptions = {\n  \"new-york\": {\n    label: \"New York\",\n    value: \"new-york\",   \n    id: 7644\n  },\n  \"los-angeles\": {\n    label: \"Los Angeles\",\n    value: \"los-angeles\",    \n    id: 17835\n  },\n  \"columbus\": {\n    label: \"Columbus\",\n    value: \"columbus\",   \n    id: 9480\n  }\n};\n\n\nfunction App() {\n\n  const [ city, setCity ] = useState('new-york');\n  const cityData = cityOptions[city];\n\n\n  //Generate the Songkick API url\n  function getSongkickUrl(songkickCityId){   \n    const songkickAPIKey = 'RpuYqxFiPPsJPs5l';\n    let songkickUrl = \"https://api.songkick.com/api/3.0/metro_areas/\" + songkickCityId + \"/calendar.json?apikey=\" + songkickAPIKey;\n    return songkickUrl;\n  };\n\n  const songkickUrl = getSongkickUrl(cityData.id);\n\n\n  //Fetch list of gigs in selected city from Songkick API\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    fetch(songkickUrl)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItems(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n    }, [])\n\n  const gigs = items.resultsPage.results.event;\n\n  {console.log(gigs)}\n\n  const listOfGigs = gigs.map((gig) =>\n     <li>{gig}</li>\n  )\n\n  return (\n    <div className=\"h-full\">\n      <Header />\n      <p>City: {cityData.label}</p>       \n      <p>ID: {cityData.id} </p>          \n      <ul>\n        {listOfGigs}\n      </ul>\n      <CitySelect\n        city={city}\n        setCity={setCity}\n        cityOptions={cityOptions}\n      />\n\n      {/*Pass spotify ID into here*/}\n      <SpotifyEmbed />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}